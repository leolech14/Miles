[build-system]
requires = ["setuptools>=61"]
build-backend = "setuptools.build_meta"

[project]
name = "miles"
version = "0.1.0"
description = "Telegram Bonus Alert Bot"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "requests",
    "beautifulsoup4",
    "feedparser",
    "python-telegram-bot~=20.8",
    "APScheduler>=3.10",
    "aiohttp>=3.9",
    "redis>=5.0",
    "PyYAML",
    "openai>=1.27,<2.0",
    "fastapi[all]",
    "uvicorn",
    "prometheus-client>=0.20.0",
    "asyncpg>=0.29.0",
    "sqlalchemy[asyncio]>=2.0.0",
    "alembic>=1.13.0",
]

[project.optional-dependencies]
# packages for development (üõ°Ô∏è Battle-tested quality gates)
dev = [
    # üöÄ Layer 1: Formatting & Style
    "ruff>=0.8.4",           # Ultra-fast Rust-based linter + formatter
    "black>=24.10.0",        # Deterministic code formatting
    
    # üß™ Layer 2: Static Analysis & Tests  
    "pytest>=8.0.0",        # Testing framework
    "pytest-cov>=5.0.0",    # Coverage reporting
    "pytest-xdist>=3.5.0",  # Parallel test execution
    "pytest-asyncio>=0.24.0", # Async test support
    "mypy>=1.13.0",          # Static type checking
    
    # üîß Layer 3: CI & Quality Gates
    "pre-commit>=4.0.0",    # Git hooks for quality gates
    "bandit>=1.7.10",       # Security vulnerability scanner
    
    # üìã Type Stubs
    "types-PyYAML>=6.0.12",
    "types-requests>=2.31.0.20240406", 
    "types-redis>=4.6.0",
    
    # üß∞ Development Tools
    "pdfplumber",            # PDF processing for tests
    "matplotlib",            # Plotting for analytics
    "fakeredis>=2.0",        # Redis mocking for tests
    "psutil>=5.9.0",         # System monitoring
    "duckdb>=1.0.0",         # Analytics database
    "pandas>=2.0.0",         # Data analysis
]

[project.scripts]
miles-scan = "bonus_alert_bot:main"
miles-ask = "ask_bot:main"

[project.entry-points.milesbot_plugins]
demo_hello = "plugins.demo_hello:HelloPlugin"
source_discovery = "plugins.source_discovery:SourceDiscoveryPlugin"
smiles_monitor = "plugins.smiles_monitor:SmilesMonitorPlugin"
livelo_scanner = "plugins.livelo_scanner:LiveloScannerPlugin"
latam_tracker = "plugins.latam_tracker:LatamTrackerPlugin"

[tool.setuptools.packages.find]
where = ["."]
exclude = ["tests"]

# üöÄ Ruff Configuration (Layer 1: Formatting & Style)
[tool.ruff]
line-length = 88  # Match Black
target-version = "py311"
extend-exclude = [
    ".venv",
    "venv",
    "node_modules",
    "__pycache__",
    ".git",
    "build",
    "dist",
    "test/keploy"  # Exclude Keploy test files
]

[tool.ruff.lint]
# Enable comprehensive rule sets
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "SIM", # flake8-simplify
    "RUF", # Ruff-specific rules
    "S",   # flake8-bandit (security)
]

ignore = [
    "E501",   # Line too long (handled by formatter)
    "S101",   # Use of assert (common in tests)
    "B008",   # Function call in argument defaults
    "RUF012", # Mutable class attributes
]

# Allow auto-fixes for these rule sets
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
# Tests can have additional flexibility
"tests/**/*.py" = ["S101", "S106", "S608"]
"test_*.py" = ["S101", "S106", "S608"]

[tool.ruff.lint.isort]
known-first-party = ["miles"]
split-on-trailing-comma = true

# ‚ö´ Black Configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  test/keploy
  | \.venv
)/
'''

# üß™ Pytest Configuration (Layer 2: Testing)
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers", 
    "--strict-config",
    "--cov=miles",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--tb=short"
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# üîç MyPy Configuration (Layer 2: Static Analysis) 
[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

# Specific module configurations
[[tool.mypy.overrides]]
module = [
    "telegram.*",
    "redis.*", 
    "requests.*",
    "feedparser.*",
    "beautifulsoup4.*",
    "openai.*",
]
ignore_missing_imports = true

# üîí Bandit Configuration (Security)
[tool.bandit]
exclude_dirs = ["tests", "test", ".venv", "venv"]
skips = ["B101"]  # Skip assert_used test

